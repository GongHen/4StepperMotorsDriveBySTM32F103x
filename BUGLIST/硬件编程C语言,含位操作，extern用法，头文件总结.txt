// C/C++语言中定义和声明有什么区别？

// 从编译原理上来说，声明是仅仅告诉编译器，有个某类型的变量会被使用，但是编译器并不会为它分配任何内存。而定义就是分配了内存。

// 对于变量
// extern int i;	只是声明，不是定义
// int i;		是声明，也是定义，但是未初始化

// extern int a =0 ;//定义一个全局变量a 并给初值。（第一次其实可以省略掉，形式等于下面这个变量a的定义）
// int a =0;//定义一个全局变量a,并给初值，

// 当你要引用一个全局变量的时候，你就必须要声明，extern int a; 这时候extern不能省略，因为省略了，就变成int a;这是一个定义，不是声明

// 对于函数
// void func(void);	没有{}函数体，就是声明
// void func() {}	有{}函数体，则是定义

// 不同的是，（可以被外部文件使用的）函数（在第一次）定义和声明时都可以将extern省略掉，不加extern也行
// 但同样的是，在外部文件使用时，就必须声明，extern void func(void); 才能继续使用。

// extern 与 头文件（*.h）的区别与联系

// 参考：http://lpy999.blog.163.com/blog/static/117372061201182051413310/
// 有一个问题：

//	我用头文件就能引入另一个.c文件的变量与函数，为什么还要这个 extern 关键字？？

// 如果我想引用一个全局变量或函数a，我只要直接在源文件中包含#include<xxx.h> (xxx.h包含了a的声明)不就可以了么，为什么还要用extern呢？？

// 重新认识头文件

// 1. 头文件用于预编译处理，为了使程序编译、链接顺利进行而作出的说明文件

// 2.那既然是说明，那么头文件里面放的自然就是关于函数，变量，类的“声明”(对函数来说，也叫函数原型)了。记着，是“声明”，不是“定义”，他只是要让编译器知道，我这里有个什么函数，有个变量，编译器得知道它的存在。
	----> 所以，#include中包含的只是头文件，而不是连带着源文件.c给 "#include" 了
	----> 所以，头文件一般就用于函数的声明，还有一些宏定义处理
	----> 别特么在头文件中定义变量了，求你了，程豪琪，（这里定义的是个全局变量的定义，所以如果这个头文件被多次引用的话，你的这个变量会被重复定义，显然语法上错了）

// 总结：

// 对变量而言，如果你想在本源文件(例如文件名A)中使用另一个源文件(例如文件名B)的变量，方法有2种：(1)在A文件中必须用extern声明在B文件中定义的变量(当然是全局变量)；(2)在A文件中添加B文件对应的头文件，当然这个头文件包含B文件中的变量声明，也即在这个头文件中必须用extern声明该变量，否则，该变量又被定义一次。

// 对函数而言，如果你想在本源文件(例如文件名A)中使用另一个源文件(例如文件名B)的函数，方法有2种：(1)在A文件中用extern声明在B文件中定义的函数(其实，也可省略extern，只需在A文件中出现B文件定义函数原型即可)；(2)在A文件中添加B文件对应的头文件，当然这个头文件包含B文件中的函数原型，在头文件中函数可以不用加extern。

// 对上述总结换一种说法

// 对于一个文件中调用另一个文件的全局变量，因为全局变量一般定义在原文件.c中，我们不能用#include包含源文件而只能包含头文件，所以常用的方法是用extern  int a来声明外部变量。另外一种方法是可以是在a.c文件中定义了全局变量int global_num ，可以在对应的a.h头文件中写extern int global_num ，这样其他源文件可以通过include a.h来声明她是外部变量就可以了。

// 另外，extern修饰符可用于C＋＋程序中调用c函数的规范问题。

// 比如在C＋＋中调用C库函数，就需要在C＋＋程序中用extern “C”声明要引用的函数。这是给链接器用的，告诉链接器在链接的时候用C函数规范来链接。主要原因是C＋＋和C程序编译完成后在目标代码中命名规则不同。

// C＋＋语言在编译的时候为了解决的多态问题，会将名和参数联合起来生成一个中间的名称，而c语言则不会，因此会造成链接时找不到对应的情况，此时C就需要用extern “C”进行链接指定，这告诉编译器，请保持我的名称，不要给我生成用于链接的中间名。

// **********************************************************************************************************************************

// volatile 关键字，本意是“易变的”
// volatile 提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。

// 如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。

// 例如：
// 在DSP开发中，经常需要等待某个事件的触发，所以经常会写出这样的程序：

short flag;
void test()
{
	do1();
	while(flag==0);
	do2();
}

// 这段程序等待内存变量flag的值变为1之后才运行do2()。变量flag的值由别的程序更改，这个程序可能是某个硬件中断服务程序。例如：如果某个按钮按下的话，就会对DSP产生中断，在按键中断程序中修改flag为1，这样上面的程序就能够得以继续运行。但是，编译器并不知道flag的值会被别的程序修改，因此在它进行优化的时候，可能会把flag的值先读入某个寄存器，然后等待那个寄存器变为1。如果不幸进行了这样的优化，那么while循环就变成了死循环，因为寄存器的内容不可能被中断服务程序修改。为了让程序每次都读取真正flag变量的值，就需要定义为如下形式：volatile short flag;

// 所以为了安全起见，只要是等待别的程序修改某个变量的话，就加上volatile关键字

// 对于C编译器来说，它并不知道这个值会被其他线程修改。自然就把它cache在寄存器里面。记住，C 编译器是没有线程概念的！这时候就需要用到volatile。

// **********************************************************************************************************************************

// 1010 & 0010 = 0010 获取第二位状态(用于获取某一位状态，没有赋值)

// &=0（与0）清零，其它不受影响（用于清零复位）

// |=1（或1）置一，其它不受影响（用于置一置位）

// 位操作等运算操作优先级>赋值操作=

// 因为单独给一个IO口给值一般为0x0001，0x002等等这种，所以赋值给多个IO口可以用=IO1|IO2|...|IOn

// 二进制乘除法我好像给忘了

// **********************************************************************************************************************************

// __packed 关键字 的作用

// stm32中通常有这样的结构体变量声明定义代码

typedef __packed struct 
{
 unsigned char enable;         		//1byte
 unsigned char id;			//1byte
 uint32_t pulsecount;			//4byte
 uint16_t *Counter_Table;  		//4byte

} MOTOR_CONTROL_S ;

// 多了一个从未见过的 __packed 关键字

// 一般是因为结构体里用了太多的变量，为了节省ram空间 所以加了个__packed关键字修饰

// 在计算机内存中，结构体变量的存储通常是按字长对齐的

// 比如：
	8位机，按字节对齐，上面分配 1+1+4+4 byte
	16位机，按字长对齐，上面分配 2+2+4+4 byte
	32位机，字长是4个字节，上面分配 4+4+4+4 byte

// 因为在大多数计算机体系结构中，对内存操作时按整字存取才能达到最高效率，相当于是以空间换取时间。
// 当然在某些计算机体系结构中，比如ARM，是支持非对齐字传输的，也就是说变量并不一定要按照字长对齐，尽管这样可能会降低效率，但换来的是存储空间上的节约


// **********************************************************************************************************************************

// 使用
// #if 0
// ...............
// #endif
// 当中的语句， 不会被编译（在预编译是被删掉了）。

// 条件编译，#if 表达式（这里的表达式一般带有宏定义） #else #endif的结构，当表达式不为零时编译if部分，为零编译else部分，#if 0也就是表示这段程序将不被编译


// **********************************************************************************************************************************
// 下面的代码只是我在实现串口通信功能中，发现往数组中添加数据很麻烦，所以自己想实现一个简单的顺序列表的代码

#define MAXSIZE 200
typedef __packed struct {
	unsigned char *buffer;
	unsigned last;
	unsigned (*init)();
	unsinged (*append)(unsigned char dat);
}BUFFER;

volatile BUFFER	buf;	// 在stm32中这样做就已经给分配内存空间了吧

void init()
{
	volatile BUFFER *pbuffer = &buf;
}

void append(unsigned char dat, BUFFER *b)
{
	if(b->last == MAXSIZE)
	{
		
	}	
}





