// DMA
// 通过硬件为 RAM 与 I/O 设备开辟一条直接传送数据的通路，能使 CPU 的效率大为提高。

// 数据传输：字节传输（8bits）/半字传输（16bits）/字传输（32bits）

// DMA2 支持全部三种传输模式，而 DMA1 只有外设到存储器和存储器到外设两种模式，DMA1不能实现存储器到存储器传输。

// DMA工作流程：
// 1. 发生一个事件后，外设发送一个请求信号到DMA控制器
// 2. DMA控制器根据通道的优先权处理请求
// 3. DMA控制器开始访问外设，发送给外设一个应答信号；
// 4. 外设收到应答信号后，释放请求；同时，DMA撤销应答信号
// 5. 外设开启下次请求处理

// 简单的来说，一定有下面的几个步骤：
// 1. 从外设数据寄存器（或者从DMA_CMARx寄存器指定地址的存储器单元）执行加载操作

// 2. 存数据到外设数据寄存器（或者存数据到DMA_CMARx寄存器指定地址的存储器单元）

// 3. 执行一次DMA_CNDTRx寄存器的递减操作。该寄存器包含未完成的操作数目。





// 1. DMA中断状态寄存器DMA_ISR（只读）
	----> 开启DMA_ISR中的中断，达到条件进入中断服务子程序
	----> 不管开没开启，都可以查询DMA_ISR来获得当前DMA传输状态
	----> 状态：传输错误/半传输/传输完成/产生TE、HT或TC事件

// 2. DMA中断标志清除寄存器DMA_IFCR
	----> 用来操作（清除）DMA_ISR中对应位

// 3. DMA通道x配置寄存器DMA_CCRx（x=1~7）
	----> 通道设置/模式设置/通道使能

// 4. DMA通道x传输数据量寄存器DMA_CNDTRx（x=1~7）
	----> 这个寄存器控制 DMA 通道 x 的每次传输所要传输的数据量。其设置范围为 0~65535。
	----> 该寄存器的值会随着传输的进行而减少，当该寄存器的值为 0 的时候就代表此次数据传输已经全部发送完成了。
	----> 可用于查询当前DMA传输进度

// 5. DMA 通道 x 的外设地址寄存器（DMA_CPARx）
	----> 该寄存器用来存储 STM32 外设的地址

// 6. DMA 通道 x 的存储器地址寄存器（DMA_CMARx）
	----> 用来放存储器的地址的。

// 基本开发流程：

// 1. 使能DMA时钟
	----> DMA是挂载在RCC_AHB外设时钟总线上的

// 2. 初始化DMA通道x参数
	----> 选择你要操作的外设所对应的DMA通道
	----> 各种初始化设置，如模式选择/通道优先级设置
	----> DMA_Init(DMAy_Channelx,&DMA_InitStruct);

// 3. 使能外设的DMA发送/接收功能

// 4. 使能DMA的通道x，开启数据传输

// 5. 查询DMA传输状态


// 关于缓冲区设置：
// 1. 设置好数据宽度，以及BufferSize(单位为数据宽度)；
// 2. 其实缓冲区就是一个数组变量啦，这样就会在内存中开辟存储区域；
// 3. Buffer[BufferSize] = {data_1,data_2,...,data_buffersize};
// 4. 修改缓冲区内容，Buffer[i] = data_changed;


// 关于循环模式：
// 1. DMA初始化完后.ADC转换完成会产生一个完成事件.这个事件会自动触发MDA来读取ADC的DR到指定内存.(外设自动触发一次DMA操作)
// 2. 然后,内存位置自增加到下一个位置.
// 3. 开启循环DMA功能.当时只是下一个内存位置超出指定的最大位置时就回到开始位置罢了.其它的事情,它就不管了.如有开启DMA完成中断事件..会有DMA完成中断事件.


// 配合定时器产生PWM思想
// 使用一个大的DMA缓冲区，先计算好半个的内容启动DMA为循环模式并设置它在DMA传送一半和完成时均产生中断；
// DMA_InitStructure.DMA_BufferSize = sizeof(SRC_Buffer)/2;
// DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
// 启动DMA后继续计算好另外半个缓冲区的内容，当发生DMA中断时表示有一半缓冲区变空，这在中断处理中计算好这半个缓冲区；
// 缓冲区的值是送到TIMx_CCRx中（改变捕获值），所以采用循环模式，应该计算好0~65536（向上计数）中有多少个捕获值
// 例如，PWM半波周期的计数值为180，开始为180，那么buffer就为{180*2,180*3,...180*(65536/180)}

