void GPIO_Key_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	// 对应IO端口时钟使能
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);

	// 对应IO端口初始化设置
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	// 上拉输入
	GPIO_Init(GPIOA,&GPIO_InitStructure);
}



STM32 的IO 口相比51 而言要复杂得多，所以使用起来也困难很多。首先STM32 的IO 口
可以由软件配置成如下8 种模式：
1、输入浮空
2、输入上拉（*）
3、输入下拉
4、模拟输入
5、开漏输出
6、推挽输出
7、推挽式复用功能
8、开漏复用功能


STM32 的每个IO 端口都有7 个寄存器来控制。他们分别是：
1、2个32位配置寄存器CRL和CRH；
----》每个IO 口的模式及输出速率，CRL(控制GPIO低8位)，CRH（控制GPIO高8位)

2、2个32 位的数据寄存器IDR和ODR；
----》类似于输入/输出数据寄存器，可设置输入/输出值

3、1 个32位的置位/复位寄存器BSRR；
----》与ODR寄存器作用相似，可以设置GPIO的输出值

4、一个16位的复位寄存器BRR；
----》作用与BSRR高16位雷同

5、1 个32位的锁存寄存器LCKR。



// 电机输出引脚
void Gpio_Motor_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	// 对应IO端口时钟使能
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOE,ENABLE);

	// 对应IO端口初始化设置
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	// 推挽输出
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&GPIO_InitStructure);				// 根据设定初始化PC3
	GPIO_ResetBits(GPIOC,GPIO_Pin_3);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_Init(GPIOC,&GPIO_InitStructure);
	GPIO_ResetBits(GPIOC,GPIO_Pin_2);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_Init(GPIOC,&GPIO_InitStructure);
	GPIO_ResetBits(GPIOC,GPIO_Pin_1);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_Init(GPIOC,&GPIO_InitStructure);
	GPIO_ResetBits(GPIOC,GPIO_Pin_0);

}


void GPIO_Key_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	// 对应IO端口时钟使能
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);

	// 对应IO端口初始化设置
	// KEY1~KEY4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4|GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	// 上拉输入
	GPIO_Init(GPIOC,&GPIO_InitStructure);			//GPIOA
}


一种解决IO口复用冲突的方法（对于有些复用IO口,如JTAG,OSC）：
1.设置复用重映射
2.调试IO口配置寄存器（AFIO_MAPR）


总结（我的理解）：
1.同一组GPIO口设置不同的输入/输出模式，函数式编程好像不能完成（或者说我不知道），最好采用寄存器编程（对CRL\CRH具体某位操作）
2.JTAG操作用到了某些IO口，这些IO口设置普通IO口时，要想屏蔽JTAG（stm32参考手册）

明天试一下：
在GPIO_Motor下将key初始化；	//	不行
GPIO_InitStructure.GPIO_Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin|KEY4_Pin;
GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;	// 	上拉输入
GPIO_Init(GPIOC,&GPIO_InitStructure);			//	GPIOC
GPIO_SetBits(GPIOC,KEY1_Pin);

在GPIO_key下将key_gpioc初始化；// 不行

调换一下两者在主程序中的顺序；	// 不行

好像PC6~9是坏的

并不是，是你用的PC口做了键盘，又做了电机，运行Motor()函数时就将键盘IO给赋值为0了，而不是上拉输入应有的1（未按键时）


