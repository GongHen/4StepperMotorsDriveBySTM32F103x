// 学习ucosII操作系统

// 1. 了解ucosII的系统架构与ASCII源码

// 2. 学习ucosII在STM32上的移植

// 提供的 SYSTEM 文件夹里面的系统函数直接支持 ucosII，只需要在 sys.h 文件里面将：SYSTEM_SUPPORT_UCOS 宏定义改为 1， 即可通过 delay_init 函数初始化 ucosII 的系统时钟节拍，为 ucosII 提供时钟节拍。


// 3. 理解ucosII操作系统下实现多任务并发工作的编程原理

// 4. 理解 任务 ：

// 任务其实就是一个死循环函数

void MyTask(void *pdata)
{
	// 准备
	while(1)
	{
		// 任务实体代码
		OSTimeDlyHMSM(x,x,x,x);//调用任务延时函数，释放cpu控制权
		// 例如，该任务延时1s后释放cpu控制权

	}
} 

// 5. 理解 任务优先级 ：

// ucos中，每个任务都有唯一的一个优先级，ucos不支持多个任务优先级相同。

// 任务就绪表中总是优先级最高的任务获得cpu使用权

// ucos中，任务优先级 就是 任务 的唯一标识

// 6. 理解 任务堆栈 ：

// 就是存储器中分配了一块连续的存储空间，作为 任务堆栈 使用

// 满足任务切换和响应中断时保存cpu寄存器中的内容以及任务调用其它函数时的需要

// 每个任务都有自己的一个任务堆栈，它是任务创建的一个重要入口参数

// 7. 理解 任务控制块 ：

// 用来记录任务堆栈指针，任务当前状态以及任务优先等级等任务的相关属性

// 包含三个重要参数：任务函数指针、任务堆栈指针、任务优先级

// 8. 理解 任务就绪表 ：

// 记录系统中所有处于就绪状态的任务

// 它是一个位图，任务相应位置0或置1表示是否处于就绪状态

// 9. 理解 任务调度 ：

// 在任务就绪表中查找优先级最高的就绪任务

// 实现任务的切换

// 10. 理解ucos中任务的5个状态及其转换关系

// 就绪，运行，等待，睡眠，中断

//********************************************************************************************************************************

// STM32上运行uscoII来进行硬件开发

// 1. 移植 ucosII 到stm32

// 2. 编写任务函数并设置其堆栈大小和优先级等参数 

// 3. 初始化ucosII，并在ucosII中创建任务

// 4. 启动 ucosII

//********************************************************************************************************************************

// 工程中要添加的文件夹以及文件：

// 1. UCOSII-CORE
	---- 添加 ucosII源码 Source 文件夹中除 os_cfg_r.h 和 os_dbg_r.c 文件外的所有文件

// 2. UCOSII-CONFIG
	---- 添加 includes.h 和 os_cfg.h 文件

// 3. UCOSII-PORT
	---- 添加 os_cpu.h、os_cpu_a.asm、os_cpu_c.c、os_dbg.c、os_dbg_r.c 文件

// 注意：不要添加 ucosii.c 文件到 UCOSII-CORE 分组中，防止出现编译时重复定义的错误。
