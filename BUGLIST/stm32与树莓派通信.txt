// 我主要是想实现stm32与树莓派进行串口通信

// 一般两块控制芯片通信（主从式）采用的方法（不一定就只能用通信总线）有：
// 1. 串行通信方式；
// 2. 共享内存方式；
// 3. 并行通信方式

// 基本思想有下面这几种：

// 1. 把树莓派串口设置为串口通信模式，树莓派3默认是蓝牙，很折腾人。然后32的TX RX 与树莓派交叉连接，共地就行；
	----> stm32的uart输出电平是TTL电平,3.3V
	----> 树莓派的uart输出电平也是TTL电平，3.3V（查询自网络）
	----> 连线简单

// 2. 树莓派如果自带wifi模块，可以使stm32接wifi模块进行串口通信；
	----> 这他妈就不用连线
	----> 开发效率低（我不会，还得学）

// 3. 树莓派如果自带蓝牙模块（网上查询，好像是树莓派的串口默认指向蓝牙模块），可以使stm32接蓝牙模块进行串口通信；
	----> 同方案2

// 附：stm32自带USB2.0控制器，可以与电脑串口通信，可用于测试

// 选择测试方案1，首先实现stm32与stm32通信

// 硬件接线：主机和从机TXD（Transmit Data）和RXD（Receive Data）交叉互连

// 基本的串口通信程序设计：


// 1. 串口时钟使能，串口是挂载在APB2时钟总线下的外设

// 2. 串口复位

// 3. 串口参数初始化

// 4. 串口使能

// 5. 数据的发送与接收，stm32采用USART_DR寄存器（双寄存器，一个TRD寄存器，一个RDR寄存器，暂存收发数据）
	----> USART_SendData(USARTx,Data);
	----> data = USART_ReceiveData(USART1);

// 6. 读取串口状态（已经开始发送数据/发送完成/接收到数据）
	----> USART_GetFlagStatus(USARTx,USART_SR->TXE/USART_SR->TC/USART_SR->RXEN)


// 7. 串口中断（一般设置接收数据/发送数据空/发送完成这三个串口中断类型）

// 基本思路（参考stm32串口多处理器通信）：

// 1. 设置A,B两块stm32，A发送地址确认B从机，再发送数据给B，B收到数据后触发串口中断，在中断中处理电机控制信息;
	----> 需要注意，从机要判断接收信息是数据，还是从机地址；
	----> 从机一开始处于静默模式，主机需要时发送指令唤醒从机（地址标记模式WAKE=1,地址匹配）

// 2. 电机运动后，B发送数据给A，A收到数据后触发转口中断，在中断中处理显示信息，显示电机当前运行状态。




